substitutions:
  friendlyname: "alarmclock"
  ha_api_key: !secret home_assistant_api_key
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  ota_password: !secret ota_password
  hotspot_password: !secret hotspot_password

esphome:
  name: ${friendlyname}
  friendly_name: ${friendlyname}
  platformio_options:
    board_build.flash_mode: dio
  on_boot:
    then:
      - delay: 5s
      - media_player.volume_set:
         id: slaapkamer_media_player
         volume: 10%

external_components:
  - source:
      type: git
      url: https://github.com/gnumpi/esphome_audio
      ref: main
    components:
      - adf_pipeline
      - i2s_audio
      #    refresh: never

esp32:
  board:   esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type:  esp-idf
    version: 4.4.8
    platform_version: 5.4.0
    sdkconfig_options:
      CONFIG_ESP32_S3_BOX_BOARD: "y"

psram:
  mode: octal
  speed: 80MHz
    
# Enable logging
logger:
  level: info

# Enable Home Assistant API
api:
  encryption:
    key: ${ha_api_key}
  actions:
    - action: rtttl_play
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
#      rtttl.play: 'Flintstones:d=4,o=5,b=200:g#,c#,8p,c#6,8a#,g#,c#,8p,g#,8f#,8f,8f,8f#,8g#,c#,d#,2f,2p,g#,c#,8p,c#6,8a#,g#,c#,8p,g#,8f#,8f,8f,8f#,8g#,c#,d#,2c#'


ota:
  - platform: esphome
    password: ${ota_password}

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}
  domain: .lan

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendlyname} Fallback Hotspot"
    password: ${hotspot_password}

captive_portal:
    
# AUX1 pin is GPIO8
# AUX2 pin is GPIO2

i2s_audio:
  - id: i2s_out
    i2s_lrclk_pin: GPIO9
    i2s_bclk_pin: GPIO10
  
adf_pipeline:
  - platform: i2s_audio
    type: audio_out
    id: adf_i2s_out
    i2s_audio_id: i2s_out
    i2s_dout_pin: GPIO11
    
media_player:
  - platform: adf_pipeline
    id: slaapkamer_media_player
    name: ${friendlyname}
    keep_pipeline_alive: false
    internal: false
    pipeline:
      - self
      - adf_i2s_out

i2c:
    sda: GPIO21
    scl: GPIO47

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Brussels
    servers:
     - 0.be.pool.ntp.org
     - 1.be.pool.ntp.org
     - 2.be.pool.ntp.org

display:
  - platform: tm1637
    clk_pin: GPIO18
    dio_pin: GPIO17
    inverted: true
    length: 4
    update_interval: 500ms
    intensity: 0
    id: temp_display
    lambda: |-
        it.printf("%.0f~C", id(bedroom_temperature).state);

  - platform: tm1637
    clk_pin: GPIO15
    dio_pin: GPIO16
    update_interval: 500ms
    length: 4
    intensity: 0
    id: time_display
    lambda: |-
        auto t = id(sntp_time).now();
        int hour = t.hour;
        int minute = t.minute;

        // Blink colon every 2 seconds
        bool blink = (int(id(millis()) / 1000) % 2) == 0;

        if (hour < 10) {
          it.printf(" %d%s%02d", hour, blink ? "." : "", minute);
          } else {
          it.printf("%02d%s%02d", hour, blink ? "." : "", minute);
        }

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO4
      inverted: true
      mode:
        input: true
    name: "${friendlyname} Knop Links"
  - platform: gpio
    pin:
      number: GPIO5
      inverted: true
      mode:
        input: true
    name: "${friendlyname} Knop Midden"
#    on_press:
#      then:
#        - switch.toggle: slaapkamerdac
  - platform: gpio
    pin:
      number: GPIO6
      inverted: true
      mode:
        input: true
    name: "${friendlyname} Knop Rechts"
    id: knop_rechts
    on_multi_click:
    - timing:
        - ON for at most 0.7s
      then:
        - logger.log: "simple click"
        - light.toggle: bedroomleds
    - timing:
        - ON for at least 1s
      then:
        - logger.log: "LONG click"
        - while:
            condition:
              binary_sensor.is_on: knop_rechts
            then:
              - light.dim_relative:
                  id: bedroomleds
                  relative_brightness: 5%
                  transition_length: 0.1s
                  brightness_limits:
                      max_brightness: 100%
              - delay: 0.3s

sensor:
  - platform: internal_temperature
    name: "${friendlyname} Internal Temperature"
    entity_category: "diagnostic"
    update_interval: 5.0min

  - platform: uptime
    name: ${friendlyname} Uptime
    id: sys_uptime
    entity_category: "diagnostic"
    filters:
      - lambda: return x / 86400;
    unit_of_measurement: "d"
    update_interval: 5.0min

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "${friendlyname} WiFi Signal dB"
    id: wifi_signal_db
    entity_category: "diagnostic"
    update_interval: 5.0min

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${friendlyname} WiFi Signal Percent"
    filters:
      - lambda: return clamp(2 * (x + 100.0), 0.0, 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""

  - platform: adc
    id: light_sensor
    name: ${friendlyname} light Sensor
    update_interval: 3s
    pin: GPIO1
    attenuation: 12db
    on_value:
      then:
        - lambda: |-
            float voltage = x;
            float brightness_factor = clamp(voltage / 3.3, 0.0, 1.0)

            // Apply a logarithmic curve for smoother eye perception
            float scaled = pow(brightness_factor, 0.6);

            // Map to TM1637 intensity range (0â€“7)
            const int min_intensity = 1;  // minimum brightness (0 = off)
            const int max_intensity = 7;  // maximum brightness
            int intensity = clamp(int(scaled * (max_intensity - min_intensity) + min_intensity + 0.8), min_intensity, max_intensity);

            // Apply to both TM1637 displays
            id(temp_display).set_intensity(intensity);
            id(time_display).set_intensity(intensity);
  - platform: bme680
    temperature:
      name: "${friendlyname} Bedroom Temperature"
      id: bedroom_temperature
      oversampling: 16x
    pressure:
      name: "${friendlyname} Pressure"
    humidity:
      id: "bedroom_humidity"
      name: "${friendlyname} Humidity"
    gas_resistance:
      id: "bedroom_gas_resistance"
      name: "${friendlyname} Gas Resistance"
    address: 0x77
    update_interval: 60s
  - platform: template
    name: "${friendlyname} Air Quality"
    id: bedroom_iaq
    icon: "mdi:gauge"
    # calculation: comp_gas = log(R_gas[ohm]) + 0.04 log(Ohm)/%rh * hum[%rh]
    lambda: |-
      return log(id(bedroom_gas_resistance).state) + 0.04 *  id(bedroom_humidity).state;
    state_class: "measurement"

text_sensor:
  - platform: template
    name: "${friendlyname} IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      int iaq = int(id(bedroom_iaq).state);
      if (iaq <= 50) return {"Excellent"};
      else if (iaq <= 100) return {"Good"};
      else if (iaq <= 150) return {"Lightly polluted"};
      else if (iaq <= 200) return {"Moderately polluted"};
      else if (iaq <= 250) return {"Heavily polluted"};
      else if (iaq <= 350) return {"Severely polluted"};
      else if (iaq <= 500) return {"Extremely polluted"};
      else return {"Unknown"};

output:
  - platform: ledc
    pin: GPIO7
    id: leds
    frequency: 2000
  - platform: ledc
    pin: GPIO13
    id: buzzer_out
    frequency: 2000
    max_power: 0.05
    
switch:
  - platform: gpio
    pin: GPIO12
    name: ${friendlyname} slaapkamerdac
    id: slaapkamerdac
    on_turn_on:
      - media_player.volume_set:
          id: slaapkamer_media_player
          volume: 10%
  
rtttl:
  output: buzzer_out
  id: my_rtttl

light:
  - platform: monochromatic
    name: "${friendlyname} Night Light"
    output: leds
    id: bedroomleds
