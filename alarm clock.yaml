esphome:
  name: test
  platformio_options:
    board_build.flash_mode: dio
#  on_boot:
#    priority: -10
#    then:
#      rtttl.play: 'mario:d=4,o=5,b=100:16e6,16e6,32p,8e6,16c6,8e6,8g6,8p,8g,8p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,16p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16c7,16p,16c7,16c7,p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16d#6,8p,16d6,8p,16c6'

external_components:
  - source:
      type: git
      url: https://github.com/gnumpi/esphome_audio
      ref: main
    components:
      - adf_pipeline
      - i2s_audio
    refresh: 0s

esp32:
  board:   esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type:  esp-idf
    version: 4.4.8
    platform_version: 5.4.0
    sdkconfig_options:
      CONFIG_ESP32_S3_BOX_BOARD: "y"

psram:
  mode: octal
  speed: 80MHz

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: "xxx"

ota:
  - platform: esphome
    password: "xxx"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .lan

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Wekker Fallback Hotspot"
    password: "xxx"

captive_portal:

i2s_audio:
  - id: i2s_out
    i2s_lrclk_pin: GPIO9
    i2s_bclk_pin: GPIO10

adf_pipeline:
  - platform: i2s_audio
    type: audio_out
    id: adf_i2s_out
    i2s_audio_id: i2s_out
    i2s_dout_pin: GPIO11

media_player:
  - platform: adf_pipeline
    id: adf_media_player
    name: s3-dev_media_player
    keep_pipeline_alive: false
    internal: false
    pipeline:
      - self
      - adf_i2s_out

i2c:
    sda: GPIO21
    scl: GPIO47
    scan: true

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Brussels
    servers:
     - 0.be.pool.ntp.org
     - 1.be.pool.ntp.org
     - 2.be.pool.ntp.org

display:
  - platform: tm1637
    clk_pin: GPIO7
    dio_pin: GPIO15
    update_interval: 2s
    intensity: 0
    id: temp_display
    lambda: |-
        it.set_intensity(id(display_intensity).state);
        it.printf(0, "%.0f~C",id(bedroom_temperature).state);

  - platform: tm1637
    clk_pin: GPIO17
    dio_pin: GPIO18
    update_interval: 2s
    intensity: 0
    id: time_display
    lambda: |-
        static int i = 0;
        i++;
        it.set_intensity(id(display_intensity).state);
        if ((i % 2) == 0)
          it.strftime("%H.%M", id(sntp_time).now());
        else
          it.strftime("%H%M", id(sntp_time).now());

number:
  - platform: template
    id: display_intensity
    name: "Intensity (0-7)"
    icon: mdi:brightness-5
    optimistic: true
    initial_value: 0
    min_value: 0
    max_value: 7
    step: 1
    update_interval: 1000ms
    restore_value: true
    on_value:
      then:
        - component.update: temp_display
        - component.update: time_display

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO4
      inverted: true
      mode:
        input: true
    name: "Knop Links"
  - platform: gpio
    pin:
      number: GPIO5
      inverted: true
      mode:
        input: true
    name: "Knop Midden"
    on_press:
      then:
        - switch.toggle: slaapkamerdac
  - platform: gpio
    pin:
      number: GPIO6
      inverted: true
      mode:
        input: true
    name: "Knop Rechts"
    id: knop_rechts
    on_multi_click:
    - timing:
        - ON for at most 0.7s
      then:
        - logger.log: "simple click"
        - light.toggle: bedroomleds
    - timing:
        - ON for at least 1s
      then:
        - logger.log: "LONG click"
        - while:
            condition:
              binary_sensor.is_on: knop_rechts
            then:
              - light.dim_relative:
                  id: bedroomleds
                  relative_brightness: 5%
                  transition_length: 0.2s
                  brightness_limits:
                      max_brightness: 100%
              - delay: 0.1s

sensor:
  - platform: internal_temperature
    name: "Internal Temperature"
  - platform: adc
    id: light_sensor
    name: light Sensor
    update_interval: 1s
    pin: GPIO2
    attenuation: auto
  - platform: bme680
    temperature:
      name: "Bedroom Temperature"
      id: bedroom_temperature
      oversampling: 16x
    pressure:
      name: "Bedroom Pressure"
    humidity:
      id: "bedroom_humidity"
      name: "Bedroom Humidity"
    gas_resistance:
      id: "bedroom_gas_resistance"
      name: "Bedroom Gas Resistance"
    address: 0x77
    update_interval: 60s
  - platform: template
    name: "Bedroom Air Quality"
    id: bedroom_iaq
    icon: "mdi:gauge"
    # calculation: comp_gas = log(R_gas[ohm]) + 0.04 log(Ohm)/%rh * hum[%rh]
    lambda: |-
      return log(id(bedroom_gas_resistance).state) + 0.04 *  id(bedroom_humidity).state;
    state_class: "measurement"

text_sensor:
  - platform: template
    name: "Bedroom IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if (int(id(bedroom_iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(bedroom_iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(bedroom_iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(bedroom_iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(bedroom_iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(bedroom_iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(bedroom_iaq).state) <= 500) {
        return {"Extremely polluted"};
      }
      else {
        return {"unknown"};
      }

interval:
- interval: 1s
  then:
    - lambda: |-
        float raw_value = id(light_sensor).state;
        int new_value = raw_value * 2;
        if (new_value != id(display_intensity).state) {
          id(display_intensity).state = new_value;
        }

output:
  - platform: ledc
    pin: GPIO16
    id: leds
  - platform: ledc
    pin: GPIO13
    id: buzzer_out
    max_power: 0.05

switch:
  - platform: gpio
    pin: GPIO12
    name: slaapkamerdac
    id: slaapkamerdac

rtttl:
  output: buzzer_out
  id: my_rtttl

light:
  - platform: monochromatic
    name: "Night Light"
    output: leds
    id: bedroomleds
